# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo4
                                 A QGIS plugin
 Solução do Grupo 4
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-04
        copyright            : (C) 2023 by Grupo 4
        emails               : e.tadeu.eb@ime.eb.br
                               raulmagno@ime.eb.br
                               arthur.cavalcante@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 4'
__date__ = '2023-05-04'
__copyright__ = '(C) 2023 by Grupo 4'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from code import interact
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.Qt import QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterRasterLayer,
                       QgsExpression,
                       QgsFields,
                       QgsFeature,
                       QgsField,
                       QgsGeometry,
                       QgsPointXY)
import processing


class Projeto2Solucao(QgsProcessingAlgorithm):
    """
    
    Este algoritmo realiza verificações topologicas em conjuntos de dados de recursos hidricos.

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    DRENAGENS = 'DRENAGENS'
    VERTSUMI = 'VERTSUMI'
    MASSASDAGUA = 'MASSASDAGUA'
    FLAGPOINT = 'FLAGPOINT'
    FLAGLINE = 'FLAGLINE'
    FLAGPOLYGON = 'FLAGPOLYGON'

    def initAlgorithm(self, config):

        # Camadas de Entrada.
        self.addParameter(QgsProcessingParameterVectorLayer(self.VERTSUMI, self.tr('Sumidouros e vertedouros'), 
                                                            types=[QgsProcessing.TypeVectorPoint], 
                                                            defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer(self.DRENAGENS, self.tr('Drenagens'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))
        #self.addParameter(QgsProcessingParameterVectorLayer('canais', 'Canais', 
        #                                                    types=[QgsProcessing.TypeVectorLine], 
        #                                                    defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer(self.MASSASDAGUA, self.tr('Massas de Agua'), 
                                                            types=[QgsProcessing.TypeVectorPolygon], 
                                                            defaultValue=None))
        
        # Camada de Saida.
        self.addParameter(QgsProcessingParameterFeatureSink(self.FLAGPOINT, self.tr('Erros pontuais'), 
                                                            type=QgsProcessing.TypeVectorPoint, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        self.addParameter(QgsProcessingParameterFeatureSink(self.FLAGLINE, self.tr('Erros lineares'), 
                                                            type=QgsProcessing.TypeVectorLine, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        self.addParameter(QgsProcessingParameterFeatureSink(self.FLAGPOLYGON, self.tr('Erros zonais'), 
                                                            type=QgsProcessing.TypeVectorPolygon, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        pontos = self.parameterAsVectorLayer(parameters, self.VERTSUMI, context)
        drenagens = self.parameterAsVectorLayer(parameters, self.DRENAGENS, context)
        massas = self.parameterAsVectorLayer(parameters, self.MASSASDAGUA, context)

        # ***********************************************************************
        # 2 Drenagens que iniciam em sumidouro
        # ***********************************************************************
        attributesError = 0
        for ponto in pontos.getFeatures():
            tipo = ponto.attributes()[4]
            if tipo == 1:
                pontoGeometry = ponto.geometry()
                for line in drenagens.getFeatures():
                    lineGeometry = line.geometry()
                    nome = line.attributes()[1]
                    for part in lineGeometry.parts():
                        vertices = list(part)
                        initialPoint = QgsGeometry.fromPointXY(QgsPointXY(vertices[0].x(), vertices[0].y()))
                        if initialPoint.equals(pontoGeometry):
                            feedback.pushInfo(f"A drenagem {nome} inicia num sumidouro!")
                            attributesError += 1
        feedback.pushInfo(f"2. Há {attributesError} drenagens que iniciam num sumidouro!")

        # ***********************************************************************
        # 5 Massa d’água com fluxo sem drenagem interna
        # ***********************************************************************
        attributesError = 0
        for massa in massas.getFeatures():
            fluxo = massa.attributes()[9]
            nome = massa.attributes()[1]
            if fluxo == True:
                massaGeometry = massa.geometry()
                cont = 0
                for line in drenagens.getFeatures():
                    lineGeometry = line.geometry()
                    if lineGeometry.crosses(massaGeometry): cont +=1
                if cont == 0:
                    feedback.pushInfo(f"A massa de água {nome} está sem drenagem interna!")
                    attributesError += 1
        feedback.pushInfo(f"5. Há {attributesError} massas de água com fluxo sem drenagem interna!")


        # ***********************************************************************
        # 8 Vertedouros e sumidouros não relacionados com uma drenagem (isolados)
        # ***********************************************************************
        attributesError = 0
        for ponto in pontos.getFeatures():
            pontoGeometry = ponto.geometry()
            nome = ponto.attributes()[1]
            noError = False
            for line in drenagens.getFeatures():
                lineGeometry = line.geometry()
                for part in lineGeometry.parts():
                    vertices = list(part)
                    for i in range(len(vertices)-1):
                        point = QgsGeometry.fromPointXY(QgsPointXY(vertices[i].x(), vertices[i].y()))
                        if pontoGeometry.intersects(point): noError = True
            if noError:
                feedback.pushInfo(f"O sumidouro/vertedouro {nome} está isolado.")
                attributesError += 1

        feedback.pushInfo(f"8. Há {attributesError} vertedouros/sumidouros isolados!")

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução do Projeto 2'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 2'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto2Solucao()
