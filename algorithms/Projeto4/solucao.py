# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo4
                                 A QGIS plugin
 Solução do Grupo 4
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-04
        copyright            : (C) 2023 by Grupo 4
        emails               : e.tadeu.eb@ime.eb.br
                               raulmagno@ime.eb.br
                               arthur.cavalcante@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 4'
__date__ = '2023-05-04'
__copyright__ = '(C) 2023 by Grupo 4'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from code import interact
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.Qt import QVariant, QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingException,
                       QgsWkbTypes,
                       QgsExpressionContextUtils,
                       QgsPointXY,
                       QgsPoint,
                       QgsSpatialIndex,
                       QgsFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsExpression,
                       QgsVectorLayer,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorLayer,
                       QgsFields,
                       QgsFeature,
                       QgsField,
                       QgsGeometry,
                       QgsGeometryUtils,
                       QgsGeometryCollection)
import processing


class Projeto4Solucao(QgsProcessingAlgorithm):
    """
    
    Este algoritmo realiza a revisão de ligação entre produtos.

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Camadas de input
    CURVAS = 'CURVAS'
    DRENAGEM = 'DRENAGEM'
    VIAS = 'VIAS'
    ENERGIA = 'ENERGIA'
    DISTANCIA = 'DISTANCIA'
    MOLDURA = 'MOLDURA'

    # Camadas de output
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):

        self.addParameter(QgsProcessingParameterVectorLayer(self.DRENAGEM, self.tr('Insira a camada de drenagem'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))
        
        self.addParameter(QgsProcessingParameterVectorLayer(self.VIAS, self.tr('Insira a camada de rodovias'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))

        self.addParameter(QgsProcessingParameterVectorLayer(self.ENERGIA, self.tr('Insira a camada de linhas de energia'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))

        self.addParameter(QgsProcessingParameterVectorLayer(self.CURVAS, self.tr('Insira as curvas de nível'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))
        
        self.addParameter(QgsProcessingParameterVectorLayer(self.MOLDURA, self.tr('Insira a moldura'), 
                                                            types=[QgsProcessing.TypeVectorPolygon], 
                                                            defaultValue=None))
                        
        self.addParameter(QgsProcessingParameterNumber(self.DISTANCIA,
                                                       self.tr('Insira a distância de busca'),
                                                       defaultValue=0.01,
                                                       type=QgsProcessingParameterNumber.Double)) #Valor padrão está em meio minuto

        self.addParameter(QgsProcessingParameterFeatureSink(self.OUTPUT, self.tr('Erros'), 
                                                            type=QgsProcessing.TypeVectorPoint, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        drenagem = self.parameterAsVectorLayer(parameters,self.DRENAGEM,context)
        vias = self.parameterAsVectorLayer(parameters,self.VIAS,context)
        energia = self.parameterAsVectorLayer(parameters,self.ENERGIA,context)
        curvas = self.parameterAsVectorLayer(parameters,self.CURVAS,context)
        moldura = self.parameterAsVectorLayer(parameters,self.MOLDURA,context)
        distancia = self.parameterAsDouble(parameters,self.DISTANCIA,context)

        #Criação da camada de saída do tipo ponto com o tipo de erro
        fields = QgsFields()
        fields.append(QgsField("tipo_erro", QVariant.String))
        (output_sink, output_dest_id) = self.parameterAsSink(parameters,self.OUTPUT,context,
                                                             fields,1,drenagem.sourceCrs())
        
        #total = 100.0 / edificios.featureCount() if edificios.featureCount() else 0
        
        #Criação de uma camada de linhas de interseção entre os produtos
        intersecoes = list()
        for molduras in moldura.getFeatures():
            geometryMoldura = molduras.geometry()
            idMoldura = molduras.id()
            #feedback.setProgressText(f'{geometryMoldura}\n\n')
            
            for mold in moldura.getFeatures():
                geometryMold = mold.geometry()
                idMold = mold.id()
                #feedback.setProgressText(f'{geometryMold}\n\n')
                if idMoldura != idMold:
                    if geometryMoldura.touches(geometryMold):
                        linha = geometryMoldura.intersection(geometryMold)
                        tipo = linha.type() #Está retornando 1 ou 0, sendo 1 para MultiLineString e 0 para Point
                        #feedback.setProgressText(f'{tipo}\n\n')
                        if tipo == 1:
                            intersecoes.append(linha)
                            #feedback.setProgressText(f'{linha}\n\n')
        #feedback.pushInfo(f"2. Há {len(intersecoes)} linhas de interseção\n\n {intersecoes[0]}") #Pensar numa solução, está gerando oito linhas       

        #Criação das áreas de busca
        areas = list()
        for i in intersecoes:
            area_busca = i.buffer(distancia, 8)
            areas.append(area_busca)
        #feedback.pushInfo(f"2. Há {len(areas)} áreas de busca porque há {len(unique_intersecoes)}\n\n")

        for area in areas:
            #Vericação sobre as linhas de drenagem
            bbox = area.boundingBox()
            for linhas in drenagem.getFeatures(bbox):
                geometryLinhas = linhas.geometry()
                nome = str(linhas.attributes()[2])
                if nome == 'NULL': continue

                for line in drenagem.getFeatures(bbox):
                    geometryLine = line.geometry()
                    name = str(line.attributes()[2])
                    if name == 'NULL': continue
                    
                    if nome != name:
                            if nome in name:
                                if geometryLinhas.touches(geometryLine):
                                    p = geometryLinhas.intersection(geometryLine).asPoint()
                                    p = QgsGeometry.fromPointXY(p)
                                    if not geometryLinhas.contains(p):
                                        feedback.pushInfo(f"O ponto {p} é o toque de {nome} com {name}.")
                                        novo_feat = QgsFeature(fields)
                                        novo_feat.setGeometry(p)
                                        novo_feat.setAttribute(0, 'atributos distintos')
                                        output_sink.addFeature(novo_feat)
        return {self.OUTPUT: output_dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução do Projeto 4'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 4'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto4Solucao()
