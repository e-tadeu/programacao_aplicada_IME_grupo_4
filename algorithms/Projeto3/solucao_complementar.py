# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo4
                                 A QGIS plugin
 Solução do Grupo 4
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-04
        copyright            : (C) 2023 by Grupo 4
        emails               : e.tadeu.eb@ime.eb.br
                               raulmagno@ime.eb.br
                               arthur.cavalcante@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 4'
__date__ = '2023-20-05'
__copyright__ = '(C) 2023 by Grupo 4'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.Qt import QVariant, QCoreApplication
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterFeatureSink
import processing
import os

class Projeto3SolucaoComplementar(QgsProcessingAlgorithm):
    """
    Este algoritmo realiza a generalização de edifícios próximos às rodovias.

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterVectorLayer('edificacoes', self.tr('Insira as edificações'),
                                                            types=[QgsProcessing.TypeVectorPoint],
                                                            defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('vias', self.tr('Insira as rodovias'),
                                                            types=[QgsProcessing.TypeVectorLine],
                                                            defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink(self.OUTPUT, self.tr('Edificacoes Rotacionadas'),
                                                            type=QgsProcessing.TypeVectorAnyGeometry,
                                                            createByDefault=True,
                                                            supportsAppend=True,
                                                            defaultValue='TEMPORARY_OUTPUT'))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(9, model_feedback)
        results = {}
        outputs = {}

        # Indices Espaciais Vias
        alg_params = {
            'INPUT': parameters['vias']
        }
        outputs['IndicesEspaciaisVias'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Explodir linhas
        alg_params = {
            'INPUT': outputs['IndicesEspaciaisVias']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExplodirLinhas'] = processing.run('native:explodelines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Descartar campos nao usados
        alg_params = {
            'COLUMN': ['id','nome','geometriaa','jurisdicao','administra','concession','revestimen','operaciona','situacaofi','canteirodi','nrpistas','nrfaixas','trafego','tipopavime','tipovia','sigla','codtrechor','limitevelo','trechoempe','acostament','length_otf'],
            'INPUT': outputs['ExplodirLinhas']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['DescartarCamposNaoUsados'] = processing.run('native:deletecolumn', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Indices Espaciais Edificacoes
        alg_params = {
            'INPUT': parameters['edificacoes']
        }
        outputs['IndicesEspaciaisEdificacoes'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Calculando os azimutes
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'Azimute',
            'FIELD_PRECISION': 5,
            'FIELD_TYPE': 0,  # Decimal (double)
            'FORMULA': 'degrees(azimuth(start_point($geometry),end_point($geometry)))',
            'INPUT': outputs['DescartarCamposNaoUsados']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculandoOsAzimutes'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # Unir atributos pelo mais proximo
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELDS_TO_COPY': [''],
            'INPUT': outputs['IndicesEspaciaisEdificacoes']['OUTPUT'],
            'INPUT_2': outputs['CalculandoOsAzimutes']['OUTPUT'],
            'MAX_DISTANCE': None,
            'NEIGHBORS': 1,
            'NON_MATCHING': None,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['UnirAtributosPeloMaisProximo'] = processing.run('native:joinbynearest', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # Alimentando a coluna rotacao
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'rotacao',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,  # Decimal (double)
            'FORMULA': '"Azimute"',
            'INPUT': outputs['UnirAtributosPeloMaisProximo']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['AlimentandoAColunaRotacao'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Descartar campos excedentes
        alg_params = {
            'COLUMN': ['Azimute','n','distance','feature_x','feature_y','nearest_x','nearest_y'],
            'INPUT': outputs['AlimentandoAColunaRotacao']['OUTPUT'],
            'OUTPUT': parameters[self.OUTPUT]
        }
        outputs['DescartarCamposExcedentes'] = processing.run('native:deletecolumn', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results[self.OUTPUT] = outputs['DescartarCamposExcedentes']['OUTPUT']

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # Configurando o estilo de camada de saida

           # Get the path to the plugin directory
        plugin_dir = os.path.dirname(__file__)
        style_file = os.path.join(plugin_dir, 'edificacoes.qml')

        alg_params = {
            'INPUT': outputs['DescartarCamposExcedentes']['OUTPUT'],
            'STYLE': style_file
        }
        outputs['ConfigurandoOEstiloDeCamadaDeSaida'] = processing.run('native:setlayerstyle', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução Complementar do Projeto 3'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 3'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto3SolucaoComplementar()
    
  