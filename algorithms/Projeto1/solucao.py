# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo4
                                 A QGIS plugin
 Solução do Grupo 4
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-04
        copyright            : (C) 2023 by Grupo 4
        emails               : e.tadeu.eb@ime.eb.br
                               raulmagno@ime.eb.br
                               arthur.cavalcante@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 4'
__date__ = '2023-04-04'
__copyright__ = '(C) 2023 by Grupo 4'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import pandas as pd
from math import sqrt
from os import name
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingException,
                       QgsProject,
                       QgsVectorLayer,
                       QgsFeature,
                       QgsField,
                       QgsPointXY,
                       QgsGeometry,
                       QVariant
                       )


class Projeto1Solucao(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    INPUTRASTER = 'INPUTRASTER'
    

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Adiciona camadas como parâmetros de processamento.

        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                self.INPUTRASTER,
                self.tr('Lista de Rasters'),
                layerType = QgsProcessing.TypeRaster
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Camada de pontos de controle'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Definindo parâmetros como fontes

        cmdpts = self.parameterAsSource(
            parameters,
            self.INPUT,
            context
        )
        if cmdpts is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT))
        
        rasters = self.parameterAsLayerList(
            parameters,
            self.INPUTRASTER,
            context
        )
        if rasters is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUTRASTER))

        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, source.fields(), source.wkbType(), source.sourceCrs())

# ***************************************************
# *********** 1. CARREGAMENTO DOS DADOS *************
# ***************************************************

        pc = list()
        for i in range (0, len(cmdpts)): #Adequar a uma camada vetorial
            x = cmdpts['x'][i]
            y = cmdpts['y'][i]
            z = cmdpts['z'][i]
            ponto = [x, y, z]
            pc.append(ponto)

            nomes = name.INPUTRASTER

# ***************************************************
# *** 2. FUNÇÃO QUE CALCULA A ACURÁCIA POSICIONAL ***
# ***************************************************
        def acuracia (modelo, pontos, name):
    #Os parâmetros desta função são (modelo digital de superfície, pontos de controle, nome)
            mds = modelo
            pc = pontos
            nome = str(name)

    # Erro
            xmin = mds.extent().xMinimum()
            xmax = mds.extent().xMaximum()
            ymin = mds.extent().yMinimum()
            ymax = mds.extent().yMaximum()

            erro = list()
            cont = 0
            for p in range(len(pc[0:])-1):
                if xmin <= float(pc[p+1][0]) <= xmax and ymin <= float(pc[p+1][1]) <= ymax:
                    error = 0
                    value, result = mds.dataProvider().sample(QgsPointXY(float(pc[p+1][0]),float(pc[p+1][1])), 1)
                    error = value - float(pc[p+1][2])
                    erro.append(error)
                    cont += 1

    # Cálculo do EMQz ---- Ajustar para adicionar a informação do PEC em alguma camada
            emqz = 0
            for i in erro:
                emqz = emqz + i**2
                emqz = sqrt(emqz/cont)

                if emqz <= 1.67:
                    print(f'O Padrão de Exatidão Cartográfica do {nome} é A com Erro Médio Quadrático de {emqz:.3f}')
                elif 1.67 < emqz <= 3.33:
                    print(f'O Padrão de Exatidão Cartográfica do {nome} é B com Erro Médio Quadrático de {emqz:.3f}')
                elif 3.33 < emqz <= 4.00:
                    print(f'O Padrão de Exatidão Cartográfica do {nome} é C com Erro Médio Quadrático de {emqz:.3f}')
                elif 4.00 < emqz <= 5.00:
                    print(f'O Padrão de Exatidão Cartográfica do {nome} é D com Erro Médio Quadrático de {emqz:.3f}')

    # Camada temporária para o erro do MDS
            points = f'Pontos de controle {nome}'
            memoryLayer = QgsVectorLayer("Point?crs=EPSG:31982", points, "memory")  
            dp = memoryLayer.dataProvider() 
            dp.addAttributes([QgsField('erro', QVariant.Double)])
            memoryLayer.updateFields()
            QgsProject.instance().addMapLayer(memoryLayer)

            aux = 0
            for p in range(len(pc[0:])-1):
                if xmin <= float(pc[p+1][0]) <= xmax and ymin <= float(pc[p+1][1]) <= ymax:
                    feat = QgsFeature()
                    feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(pc[p+1][0]),float(pc[p+1][1]))))
                    feat.setAttributes([erro[aux]])
                    dp.addFeatures([feat])
                    memoryLayer.updateExtents()
                    aux += 1

# ***************************************************
# ************ 3. APLICAÇÃO DA FUNÇÃO ***************
# ***************************************************

#Aplicada uma estrutura de repetição que aplica a função criada para todas as INPUTRASTER carregadas
            for i in range (0, len(rasters)):
                acuracia(rasters[i], pc, nomes[i])



        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
            return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução do Projeto 1'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 1'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto1Solucao()
